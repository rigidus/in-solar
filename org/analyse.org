#+STARTUP: showall indent hidestars

* Intro

Я хочу проанализировать структуру стейт-машин конвейера и результаты
разбора представить как plantuml-диаграмму.

Пока у меня есть один файл, который я хочу разобрать:

#+NAME: filename
#+BEGIN_SRC go
  "src/github.com/insolar/assured-ledger/ledger-core/v2/logicrunner/sm_object/object.go"
#+END_SRC

Я буду передавать ~filename~ в функцию ~analyse~, которая будет выполнять
всю работу. Она возвращатит необходимый мне ~uml~, и может что-то
выводить (сайд-эффект), например диагностические сообщения.

Таким образом ~main~ будет просто выводить возвращаемое значение
~analyze~.

#+NAME: main
#+BEGIN_SRC go :tangle analyse.go :noweb yes
  package main

  import (
      "fmt"
      "os"
      "go/ast"
      "go/token"
      "go/parser"
      "errors"
      "io/ioutil"
      "strings"
      "reflect"
  )

  const (
      filename  = <<filename>>

      MistakeType = 1 + iota

      // type-ids for Variant struct
      SelectorType
      StringType

      // type-ids for Ret struct
      RetTypeCall
  )

  <<parsed_file>>

  <<fn_state>>

  <<recv_pair>>

  <<ret>>

  <<variant>>

  func main () {
      uml := analyse(filename)
      fmt.Printf("\n\n\n\n\n~~~~~~~~~~~~~~~~~\n%s", uml)
  }

  <<analyse>>
#+END_SRC

* Analyse

~Analyse~ формирует ~uml~, разбирая файл с с помощью ~ParseFile~. Если
~ParseFile~ не справляется, она возвращает ~nil~ и мы уходим в панику.

#+NAME: analyse
#+BEGIN_SRC go :noweb yes
  func analyse(filename string) string {
      pathname := fmt.Sprintf("%s/%s", os.Getenv("GOPATH"), filename)
      uml := "@startuml"
      pf := ParseFile(pathname, true)
      if nil == pf {
          panic("Cannot parse file")
      }
      // TODO: тут будет разбор pf
      uml += "\n@enduml\n"
      return uml
  }

  <<parse_file>>
#+END_SRC

* ParseFile

Задача функции ~ParseFile~ - прочитать файл с помощью ~slurpFile~,
разобрать его и для каждой найденной функции внутри этого файла вызвать
~pf.parseMethod~.

Функия ~ParseFile~ вовзращает объект ~ParsedFile~, который будет
использоваться для анализа преобразованного содержимого и построения
~uml~.

#+NAME: parse_file
#+BEGIN_SRC go :noweb yes
  func ParseFile(fileName string, dbg ...bool) *ParsedFile {
      pf := &ParsedFile{
          filename: fileName,
          dbg:      dbg[0],
      }

      sourceCode, err := slurpFile(fileName)
      if err != nil {
          return nil
      }
      pf.code = sourceCode

      pf.fileSet = token.NewFileSet()
      node, err := parser.ParseFile(pf.fileSet, pf.filename, pf.code, parser.ParseComments)
      if err != nil {
          return nil
      }
      pf.node = node

      pf.states = make(map[string]*FnState)

      ast.Inspect(node, func(n ast.Node) bool {
          fn, ok := n.(*ast.FuncDecl)
          if ok {
              pf.parseMethod(fn)
          }
          return true
      })

      return pf
  }

  <<slurp_file>>

  <<parse_method>>

#+END_SRC

Потребуется несколько вспомогательных определений и функций:

** ParsedFile

Это структура, которая хранит все что мы смогли извлечь из кода
файла. Она содержит:
- dbg - флаг вывода диагностических сообщений
- filename - путь к файлу
- code - строку, содержащую весь код
- fileSet - set of source files для конкурентного доступа
- node - корневую ноду кода
- states - извлеченные состояния стейт-машины

#+NAME: parsed_file
#+BEGIN_SRC go
  type ParsedFile struct {
      dbg      bool
      filename string
      code     []byte
      fileSet  *token.FileSet
      node     *ast.File
      states   map[string]*FnState
  }
#+END_SRC

** FnState

Это структура, которая представляет найденное состояние стейт машины. Она
содержит:
- Name - имя состояния
- Recv - объект к которому относится состояние (оставлен на случай если у
  нас вдруг в одном файле окажутся две стейт-машины)
- Pars - параметры, которые принимает функция состояния
- Rets - Все возможные возвращаемые значения, которые удалось найти

#+NAME: fn_state
#+BEGIN_SRC go :results append
  type FnState struct {
      Name string            // Name of function
      Recv *RecvPair         // Receiver
      Pars map[string]string // Parameters: k:name, v:type
      Rets []*Ret            // All returns
  }
#+END_SRC

*** RecvPair

Эта структура содержит данные ресейвера к которому относится состояние
стейт-машины:
- имя
- тип

#+NAME: recv_pair
#+BEGIN_SRC go
  type RecvPair struct {
      Name string
      Type string
  }
#+END_SRC

*** Ret

Эта структура содержит "выходы состояния", которые удалось найти при
парсинге этого состояния. Содержит:
- Lvl - глубина в коде (Top или Deep)
- Str - строковое представление выхода
- Type - тип возвращаемого значения из списка типов возвращаемых
  значений, определенных в ... [TODO:gmm]
- Var - содержимое возвращаемого значения
- Args - аргументы (если есть)

#+NAME: ret
#+BEGIN_SRC go
  type Ret struct {
      Lvl  string
      Str  string
      Type int
      Var  Variant
      Args []Variant
  }
#+END_SRC

**** Variant

Variant - это структура, которая представляет [TODO:gmm]

#+NAME: variant
#+BEGIN_SRC go
  type Variant struct {
      Type int
      Obj  string
      Fun  string
      Str  string // string representation
  }
#+END_SRC

** SlurpFile

Это функция, которая считывает файл

#+NAME: slurp_file
#+BEGIN_SRC go
  func slurpFile(fileName string) ([]byte, error) {
      file, err := os.OpenFile(fileName, os.O_RDONLY, 0)
      if err != nil {
          return nil, errors.New(fmt.Sprintf("Can't open file: [%s]", filename))
      }
      defer file.Close() //nolint: errcheck

      res, err := ioutil.ReadAll(file)
      if err != nil {
          return nil, errors.New(fmt.Sprintf("Can't read file: [%s]", filename))
      }
      return res, nil
  }
#+END_SRC




* ParseMethod

Это функция, которая разбирает каждую функцию в файле и анализирует
ее. Если анализируемая функция является методом... [TODO:gmm]

#+NAME: parse_method
#+BEGIN_SRC go :noweb yes
  func (pf *ParsedFile) parseMethod(fn *ast.FuncDecl) {

      // I want to analise only method functions (if exists)
      if nil == fn.Recv {
          if pf.dbg {
              fmt.Printf("\n:parseMethod: skip %s - No receiver", fn.Name.Name)
          }
      } else {

          for _, fld := range fn.Recv.List {

              // I want analyse only method-functions
              if 1 != len(fld.Names) { // There is method function
                  if pf.dbg {
                      //fmt.Printf("\n:parseMethod: skip %s - No method function", fn.Name.Name)
                  }
                  continue
              }

              //// I want analyse only exported methods
              //if !fn.Name.IsExported() {
              //	if pf.dbg {
              //		fmt.Printf(":parseMethod: skip %s - Non exported \n", fn.Name.Name)
              //	}
              //	continue
              //}

              // Receiver
              recv := &RecvPair{
                  Name: fld.Names[0].Name,
                  Type: fmt.Sprintf("%s", pf.code[fld.Type.Pos()-1:fld.Type.End()-1]),
              }

              // Parameters
              pars := make(map[string]string, 0)
              for _, par := range fn.Type.Params.List {
                  if nil == par.Names {
                      pars["unnamed-param"] = fmt.Sprintf("%s", pf.code[par.Type.Pos()-1:par.Type.End()-1])
                  } else {
                      pars[par.Names[0].Name] = fmt.Sprintf("%s", pf.code[par.Type.Pos()-1:par.Type.End()-1])
                  }
              }

              // I want to analyse only methods, who takes context
              if !isMethodTakesCtx(pars) {
                  if pf.dbg {
                      fmt.Printf("\n:parseMethod: skip %s - Doesn`t take CTX", fn.Name.Name)
                  }
                  continue
              }

              // I want analyse only methods, which returned values
              if nil == fn.Type.Results {
                  if pf.dbg {
                      fmt.Printf("\n:parseMethod: skip %s - No return value", fn.Name.Name)
                  }
                  continue
              }

              // I want to analyze methods which have a `smashine.StateUpdate' result type
              res := fn.Type.Results.List[0].Type
              resSel, ok := res.(*ast.SelectorExpr)
              if !ok || "StateUpdate" != resSel.Sel.Name {
                  if pf.dbg {
                      fmt.Printf("\n:parseMethod: skip %s - No StateUpdate result type", fn.Name.Name)
                  }
                  continue
              }
              resXstr := fmt.Sprintf("%s", pf.code[resSel.X.Pos()-1:resSel.X.End()-1])
              if "smachine" != resXstr {
                  if pf.dbg {
                      fmt.Printf("\n:parseMethod: skip %s - No smachine selector result type", fn.Name.Name)
                  }
                  continue
              }

              // Show name (debug)
              //fmt.Printf("\n:parseMethod: (name dbg) %s", fn.Name.Name)

              // Find all Return Statements in function content
              var rets = make([]*Ret, 0)
              for _, smth := range fn.Body.List { // ∀ fn.Body.List ← (or RetStmt (Inspect ...))
                  retStmt, ok := smth.(*ast.ReturnStmt)
                  if ok {
                      // return from top-level statements of function
                      rets = append(rets, collectRets(retStmt, pf.code, "Top")...)
                  } else {
                      ast.Inspect(smth, func(in ast.Node) bool {
                          // Find Return Statements
                          retStmt, ok := in.(*ast.ReturnStmt) // ←
                          if ok {
                              // return from deep-level function statememt
                              rets = append(rets, collectRets(retStmt, pf.code, "Deep")...)
                          } else {
                              //fmt.Printf("\nin: %s", reflect.TypeOf(in))
                          }
                          return true
                      })
                  }
              }

              pf.states[fn.Name.Name] = &FnState{
                  Name: fn.Name.Name,
                  Recv: recv,
                  Pars: pars,
                  Rets: rets,
              }
          }
      }
  }

  <<is_method_takes_ctx>>

  <<collect_rets>>

#+END_SRC

** isMethodTakesCtx

[TODO:gmm]

#+NAME: is_method_takes_ctx
#+BEGIN_SRC go
  func isMethodTakesCtx(pars map[string]string) bool {
      for _, parType := range pars {
          if strings.Contains(parType, "Context") {
              return true
          }
      }
      return false
  }
#+END_SRC

** collectRets

[TODO:gmm]

#+NAME: collect_rets
#+BEGIN_SRC go
  func collectRets(retStmt *ast.ReturnStmt, code []byte, level string) []*Ret {
      var acc []*Ret
      for _, ret := range retStmt.Results {
          item := &Ret{
              Lvl: level,
              Str: fmt.Sprintf("%s", code[ret.Pos()-1:ret.End()-1]),
          }
          for _, retNode := range retStmt.Results {
              /// fmt.Printf("\n :collectRet: (dbg type of retNode) %s",  reflect.TypeOf(retNode))
              switch retNode.(type) {
              case *ast.CallExpr:
                  item.Type = RetTypeCall
                  retCall := retNode.(*ast.CallExpr)
                  switch retCall.Fun.(type) {
                  case *ast.SelectorExpr:
                      retSelector := retCall.Fun.(*ast.SelectorExpr)
                      item.Var.Fun = retSelector.Sel.Name
                      /// fmt.Printf("\n  :collectRet: (Selector) (%s.) =:[%s]:=", reflect.TypeOf(retSelector.X), retSelector.Sel.Name)
                      switch retSelector.X.(type) { // Analyse started from [selector.*]
                      case *ast.Ident:
                          retX := retSelector.X.(*ast.Ident)
                          item.Var.Obj = retX.Name
                          /// fmt.Printf("\n   :collectRet: (%s.)", item.Var.Obj)
                          switch item.Var.Fun {
                          case "Jump":
                          case "Stop":
                          case "JumpExt":
                          default:
                              fmt.Printf("\n:collectRets: [WARN]: UNKNOWN RET SELECTOR '%s' in '%s.%s'",
                                  item.Var.Fun, item.Var.Obj, item.Var.Fun)
                          }
                      case *ast.CallExpr:
                          subX := retSelector.X.(*ast.CallExpr)
                          subXStr := fmt.Sprintf("%s", code[subX.Pos()-1:subX.End()-1])
                          item.Var.Obj = subXStr
                          /// fmt.Printf("\n   :collectRet: (call to selector) (%s.)", item.Var.Obj)
                          switch item.Var.Fun { // Check Fun (nb: not arg!)
                          case "ThenRepeat":
                          case "ThenJump":
                          default:
                              fmt.Printf("\n:collectRets: [WARN]: UNKNOWN RET SUB SELECTOR '%s' in '%s'",
                                  item.Var.Fun, item.Var.Obj, item.Var.Fun)
                          }
                      default:
                          fmt.Printf("\nERR: UNKNOWN RETSELECTOR %s | ",
                              reflect.TypeOf(retSelector.X),
                              code[retSelector.X.Pos()-1:retSelector.X.End()-1],
                          )
                      }

                      // Args
                      accArgs := make([]Variant, 0)
                      for _, retarg := range retCall.Args {
                          /// fmt.Printf("\n   -:collectRet: arg type [%s]", reflect.TypeOf(retarg))
                          switch retarg.(type) {
                          case *ast.SelectorExpr:
                              sel := retarg.(*ast.SelectorExpr)
                              selName := fmt.Sprintf("%s", code[sel.X.Pos()-1:sel.X.End()-1])
                              /// fmt.Printf("\n   -|[%s] %s .|. %s", reflect.TypeOf(sel), selName, sel.Sel.Name)
                              arg := Variant{
                                  Type: SelectorType,
                                  Obj:  selName,
                                  Fun:  sel.Sel.Name,
                              }
                              accArgs = append(accArgs, arg)
                          case *ast.Ident:
                              idn := retarg.(*ast.Ident)
                              /// fmt.Printf("\n   -|[%s] %s", reflect.TypeOf(idn), idn.Name)
                              //arg := fmt.Sprintf("%s", idn.Name)
                              arg := Variant{
                                  Type: StringType,
                                  Str:  idn.Name,
                              }
                              accArgs = append(accArgs, arg)
                          case *ast.CompositeLit:
                              cl := retarg.(*ast.CompositeLit)
                              // We know only JumpExt composite literal
                              arg := Variant{}
                              if "JumpExt" == item.Var.Fun {
                                  ast.Inspect(cl, func(n ast.Node) bool {
                                      exp, ok := n.(*ast.KeyValueExpr)
                                      if ok {
                                          if "Transition" == fmt.Sprintf("%s", exp.Key) {
                                              sel := exp.Value.(*ast.SelectorExpr)
                                              selName := fmt.Sprintf("%s", code[sel.X.Pos()-1:sel.X.End()-1])
                                              arg = Variant{
                                                  Type: SelectorType,
                                                  Obj:  selName,
                                                  Fun:  sel.Sel.Name,
                                              }
                                              /// fmt.Printf("\n   -| %s.%s", selName, sel.Sel.Name)
                                          }
                                      }
                                      return true
                                  })
                              } else {
                                  fmt.Printf("\n:collectRets: [ERR]: INK JumpExt transition")
                              }
                              accArgs = append(accArgs, arg)
                          default:
                              fmt.Printf("\nERR: UNKNOWN RETARGtype [%s] :OF: %s", reflect.TypeOf(retarg), retarg)
                          }
                      }
                      item.Args = accArgs
                  default:
                      fmt.Printf("\nERR: UNKNOWN RETSEL %s", fmt.Sprintf("%s", reflect.TypeOf(retCall.Fun)))
                  }
              default:
                  fmt.Printf("\nERR: UNKNOWN RETNODE %s", fmt.Sprintf("%s", reflect.TypeOf(retNode)))
              }
          }
          acc = append(acc, item)
      }
      return acc
  }

#+END_SRC

*** RetTypeCall

* AnalyseOld

#+NAME: mainwww
#+BEGIN_SRC go :noweb yes
  ///
  //    Copyright 2019 Insolar Technologies
  //
  //    Licensed under the Apache License, Version 2.0 (the "License");
  //    you may not use this file except in compliance with the License.
  //    You may obtain a copy of the License at
  //
  //        http://www.apache.org/licenses/LICENSE-2.0
  //
  //    Unless required by applicable law or agreed to in writing, software
  //    distributed under the License is distributed on an "AS IS" BASIS,
  //    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  //    See the License for the specific language governing permissions and
  //    limitations under the License.
  ///

  package main

  import (
      "errors"
      "fmt"
      "go/ast"
      "go/parser"
      "go/token"
      "io/ioutil"
      "os"
      "reflect"
      "strings"
  )

  const (
      TemplateDirectory = "templates"

      //filename = "src/github.com/insolar/assured-ledger/ledger-core/v2/conveyor/smachine/ping-pong/example/example_3.go"
      filename  = "src/github.com/insolar/assured-ledger/ledger-core/v2/logicrunner/sm_object/object.go1"
      mainPkg   = "main"
      errorType = "error"
      MachineTypeGoPlugin
  )



  const (
      MistakeType = 1 + iota

      // type-ids for Variant struct
      SelectorType
      StringType

      // type-ids for Ret struct
      RetTypeCall
  )

  func (v Variant) Show() string {
      switch v.Type {
      case MistakeType:
          return fmt.Sprintf("MistakeType")
      case SelectorType:
          return fmt.Sprintf("(. %s %s)", v.Obj, v.Fun)
      case StringType:
          return fmt.Sprintf("%s", v.Str)
      default:
          return "Impossible Error"
      }
  }


  func main() {
      pathname := fmt.Sprintf("%s/%s", os.Getenv("GOPATH"), filename)
      pf := ParseFile(pathname, true)
      if nil == pf {
          panic("Cannot parse file")
      }
      uml := "@startuml"
      // Debug output
      if pf.dbg {
          fmt.Printf("\n:: resource filename: %s", pf.filename)
      }
      for _, state := range pf.states {
          if pf.dbg {
              fmt.Printf("\n\nfn: %s", state.Name)                            // Function name
              fmt.Printf("\nrecv: %s | %s", state.Recv.Name, state.Recv.Type) // Receiver
              for parName, parType := range state.Pars {                      // Parameters
                  fmt.Printf("\npar name: %s | type: %s", parName, parType)
              }
          }
          for _, item := range state.Rets {
              if pf.dbg {
                  fmt.Printf("\n%s: ['%s']", item.Lvl, item.Str)
              }
              // dbg
              //uml += fmt.Sprintf("\n ! %s | %s", item.Type, item.Var.Fun)
              switch item.Type {
              case RetTypeCall:
                  switch item.Var.Fun {
                  case "Stop":
                      uml += fmt.Sprintf("\n%s --> [*]", state.Name)
                  case "Jump":
                      uml += fmt.Sprintf("\n%s --> %s", state.Name, item.Args[0].Fun)
                  case "ThenJump":
                      uml += fmt.Sprintf("\n%s --> %s", state.Name, item.Args[0].Fun)
                  case "JumpExt":
                      uml += fmt.Sprintf("\n%s --> %s", state.Name, item.Args[0].Fun)
                  case "ThenRepeat":
                      uml += fmt.Sprintf("\n%s --> %s : ThenRepeat", state.Name, state.Name)
                  case "RepeatOrJumpElse":
                      uml += fmt.Sprintf("\n%s -[#RoyalBlue]-> %s : RepeatOr(Jump)Else", state.Name, item.Args[2].Fun)
                      uml += fmt.Sprintf("\n%s -[#DarkGreen]-> %s : RepeatOrJump(Else)", state.Name, item.Args[3].Fun)
                  default:
                      if pf.dbg {
                          fmt.Printf("\n(=> (. %s %s)", item.Var.Obj, item.Var.Fun)
                          for _, arg := range item.Args {
                              fmt.Printf("\n       %s", arg.Show())
                          }
                          fmt.Printf(")")
                      }
                  }
              default:
                  fmt.Printf("\nError: Unknown RetType: %d", item.Type)
              }
              if pf.dbg {
                  fmt.Printf("\n(-> (. %s %s)", item.Var.Obj, item.Var.Fun)
                  for _, arg := range item.Args {
                      fmt.Printf("\n       %s", arg.Show())
                  }
                  fmt.Printf(")")
              }
          }
      }
      uml += "\n@enduml"
      fmt.Printf("\n\n\n\n\n~~~~~~~~~~~~~~~~~\n%s", uml)
  }




#+END_SRC
