#+STARTUP: showall indent hidestars
#+SETUPFILE: https://raw.githubusercontent.com/fniessen/org-html-themes/master/setup/theme-readtheorg.setup


* Intro

Чтобы облегчить процесс понимания того как это все работает, я написал
эту "краткую, неполную, и (вероятно) местами неверную схему работы", в
надежде, что она пригодиться для онбординга и "связывания концов".

* Overview

Insolar - это распределенный вычислитель, использующий в качестве системы
хранения ~DLT~ (distributed ledger technology), распределенный реестр.

Распределенный вычислитель состоит из узлов распределенной вычислительной
сети (~Node~), которые обмениваются запросами (~Request~).

~Request~ - это сетевой запрос от одного элемента системы -
другому. Логически элементами могут быть api или смарт-контракты,
физически они исполняются на узлах сети.

~Node~ - это компьютер, подключенный к сети, который выполняет для сети
какую-то работу в соответствии со своей ~Role~.

~Role~ - это то какую работу ~Node~ делает для сети. Подробнее в разделе [[*Node
 Roles][Node Roles]].

Я начну объяснение с пути отслеживания прохождения ~Request~. Но сначала
придется сделать шаг назад и узнать про ~Pulse~.

~Pulse~ - это некоторый временной отрезок, в течении которого набор
~Node~, которые исполняют свои ~Role~, остается постоянным. На каждом
пульсе должно существовать несколько (определенное кол-во) узлов с ролью
~VE~, несколько с ролью ~LME~ и так далее. [TODO:gmm] - Раскрыть про
роль, которая применяется к объекту. Когда ~Pulse~ меняется, формируется
новый набор узлов, которые будут выполнять эти роли.

Также пульс содержит энтропию, в соответствии с которой в новом пульсе
будут переназначены роли для нод - таким образом обеспечивается
сменяемость нод. Этим мы усложняем "сговор" узлов.

Пульс задают ~Pulsar~-ноды. Быть пульсаром - это не одна из Ролей, это
совершенно особый тип ноды, который занимается только генерацией
~Pulse~.

У нас будет ~Pulsar Network~, который будет использовать распределенный
алгоритм генерации случайного числа, после чего достигают консенсуса в
BFT-подобном алгоритме и отправляют ~Pulse~ набору случайных нод в
сети. Эти случайные ноды, в свою очередь, распространяют пульс дальше,
своим соседям. В теории ноды сети не знают где пульсары.

Но в данный момент у нас есть один выделенный пульсар.

Мы заинтереснованы в корректной работе пульсаров, потому что если
очередной пульс не придет - то вся сеть будет продолжать работать в
последнем пульсе, а это не то чего хотелось бы.

Когда ноды получают новый ~Pulse~, они прекращают ту работу, которой
занимались согласно выделенной роли, и начинают [TODO:gmm] - Cмену пульса

[TODO:gmm] При смене пульса бывшие executor-ы продолжают работу:
сохраняют данные.

Теперь когда мы имеем представление о пульсах, можно рассмотреть как
исполняется запрос.

* Request flow

Мы будем в качестве примера рассматривать (простой) запрос (например
запрос о переводе денег от одного пользователя к другому).

Он начинается с (мобильного) приложения пользователя, которое формирует
~Request~ и подписывает его ~Private Key~ пользователя.

Этот запрос отправляется одной из нод сети и попадат на ~BorderContract~.

- Как приложение узнает о нодах сети и их адресах, куда отправить запрос? -
- В данный момент они захардкожены.

~BorderContract~ - это контракт, который может выполнить любая
исполняющая код нода сети.

У ~BorderContract~-ов есть своя внутренняя машинерия, нацеленная на то
чтобы все ноды, которые могут принять API-запрос знали о
~BorderContract~-ах. Она описана в [[*BorderContracts][BorderContracts]] и
https://insolar.atlassian.net/wiki/spaces/DEV/pages/1009287169/Core+v2+-+VN+-+Custom+APIs

API-запрос содержит:
- адрес объекта (в нашем примере - кошелек)
- имя метода (transfer)
- поля, зависящие от типа запроса
  - amount (кол-во переводимых денег)
  - to (адрес кошелька, кому переводим)
- seed (против replay-attack). Если повторный запрос будет с уже
  известным seed то он будет отвергнут, т.е. на уровне сети нельзя
  послать один запрос дважды
- подпись пользователя

Задачи ~BorderContract~:
- опеределить ~UserAddr~ - адрес контракта кошелька пользователя. В
  простейшем случае это можно достать из хэш-таблицы вида pubKey:addr
  которая может лежать на ~LM~ и которую мы можем запросить. Ответ будет
  подписан, поэтому ~LM~ теоретически может быть привлечен к
  ответственности за подлог, но процедуры такой пока нет.
  [TODO:gmm] -  Уточнить у Кирилла
- создать ~ctx~ - контекст исполнения запроса, структуру данных, которая
  будет сопровождать запрос, и положить туда ~UserAddr~.
- зарегистрировать ~Request~ на ~LME~ и отправить об этом
  подтверждение. Это гарантирует что запрос будет исполнен.
- Так как теперь известен адрес контракта кошелька пользователя, то можно
  вызвать этот контракт на текущем ~VirtualExecutor~-е для этого
  контракта. В параметрах передаем ~amount~ из запроса:
  ~wallet.transfer(another_wallet, amount)~

[TODO:gmm] -  Как определяется текущий ~VE~ для конкретного объекта?
https://insolar.atlassian.net/wiki/spaces/DEV/pages/826212449/2019-06-18+-+06-21+Request+s+Journey+on+the+Insolar+Network

~VE~ вынимает ~UserAddr~ из ~ctx~ и находит соответствующий текущему
пульсу и адресу ~LM~ и получает от него код контракта и его текущее
состояние. Для этого сначала надо взять объект, по которому нужно
получить данные, вычислить Jet [TODO:gmm], к которому он относится - это можно
сделать зная дерево Jet-ов [TODO:gmm] и список LMN. Возможно ~VE~ имеет
неактуальное дерево Jet-ов, поэтому когда он пойдет к LMN, тот даст ему
актуальное дерево Jet-ов.

В результате ~VE~ попадает к нужному ~LME~, получает данные и отдельным
запросом код. Но сейчас у нас весь код built-in.

Если у ~LME~ нет этих данных, он запрашивает их у ~HMN~ или даже у одного
из ~LME~ предыдущих пульсов, получает их и кладет себе в кэш.

Однако ситуация отличается, в случае если один ~VE~ вызывает
другой. Тогда мы знаем что у предыдущего ~VE~ есть все необходимые данные
и новый ~VE~ может (и должен) получить их у старого.

Теперь все готово, чтобы начать исполнение контракта.

Теперь начинает работать контракт кошелька пользователя. Для трансфера он
должен:
- зарегистрировать incomming request на своем ~LME~, получить ОК и начать
  исполнять далее.
- проверить, что пользователь имеет право переводить деньги с кошелька -
  это можно проверить через принадлежность кошелька пользователя
  (например, в объекте кошелька может быть указание на owner-a и тогда мы
  сверяем от чего имени идет исполнение с этим owner-ом)
- проверить что на кошельке хватает баланса
- уменьшить свой баланс на сумму перевода
- вызвать на целевом кошельке метод accept на эту сумму
  (~target.accept(amount)~) Это исходящий SAGA-вызов - он помечен
  аннотацией. Т.к. это исходящий SAGA-вызов - он просто регистрируется на
  ~LME~ но его исполнение откладывается.
- контракт успешно завершается, на ~LME~ сохраняется его Result и новый
  стейт
- в этот моменто ~LME~ триггерит запуск SAGA-вызова и исполнение
  продолжается на новом ~VE~ который является текущим в этом пульсе для
  целевого кошелька.
- ~VE~ целевого кошелька сохраняет incomming request на своем ~LME~ и
  начинает его исполнение

В дальнейшем SAGA может иметь механизм rollback, который заключается в
том, что на исходящей части SAGA-вызова к методу accept целевого кошелька
будет добавлен метод rollback (с теми же параметрами что и accept),
который будет зарегистрирован на кошельке пользователя, если accept по
какой-то причине не прошел. [TODO:gmm] - Кто должен сделать регистрацию?

[TODO:gmm] Code Owner = Саша Алексеев. Где этот код?

И мы оказываемся снова в ~BorderContract~, который cохраняет на ~DLT~
информацию о успешно выполненной транзакции. Именно транзакции, потому
что запрос фактически был выполнен еще до того как началась обработка
SAGA-вызова.

- Как регистрируется запрос на ~Ledger~-е?
- Когда ~VE~ получает входящий запрос, он регистрирует incomming request
  на своем ~LME~ для этого объекта
- Когда ~VE~ исполняя контракт хочет сделать вызов, он сначала на своем
  ~LME~ создает outgoing request, после этого посылает другому ~VE~
  запрос, и этот другой ~VE~ регистрирует на своем ~LME~ incomming
  request. Вызывающий ~VE~ ожидает возврата, таким образом, это
  синхронный вызов. Если какой-то ~LME~ зависнет, то ~VE~ будет ждать на
  этому вызове до окончания пульса. Но остальные объекты будут продолжать
  обрабатываться.
- Существуют еще асинхронные ~NoWait~ вызовы. Они не ожидают возврата, но
  пока таких нет.

- [TODO:gmm] - Retryable Error. Увеличение счетчика попыток для
  запроса. Найти в VN-PROTOCOL в конфле. Там же есть оптимизации для
  скорости, например не ходим к лайту на каждый чих, а регистрируем
  incomming и outgoing в одной пачке, если нет исходящих вызовов.

[COMMENT:gmm] Я предполагаю, что проверка подписи - затратное мероприятие
по сравнению с формированием запроса, поэтому вредоносные приложения
могут спамить ноды запросами с целью нарушить их работу. Поэтому было бы
правильно уравновесить вычислительные затраты на формирование запроса
чтобы избежать этого вектора атаки. Решение - как fail2ban только
fail2proof, т.е. увеличивать сложность доказательства.

** Cохранение данных

Далее запрос попадает на Ноду, которая является VirtualExecutor-ом
данного контракта в этом Пульсе. Любая Нода, зная текущий Пульс и объект,
метод которого вызывается, может вычислить ~VirtualExecutor~ по известной
функции.

~VirtualExecutor~ выполняет контракт. В процессе работы он может
отправлять изменения на ~Light Matherial Node~. Еще он отправляет
outgoing request на ~LME~ каждый раз когда вызывает кого-то, и при
возврате соответственно ~LME~ получает ~Result~ этого request-a

Если внешних вызовов не происходит, то технически можно отправлять
изменения вместе с ~Result~ в одной посылке. [TODO:gmm] - так ли это?

После окончиная пульса ~LME~ делает ~JetDrop~ - т.е. сохраняет данные на
~HMN~ и на некоторое время (light-stash-limit) становится ~LMS~ - ~Light
Matherial Stash~. Это значит что он хранит данные и отдает их в ответ на
запросы. После окончания light-stash-limith он удаляет эти данные и
дальше их можно будет найти только на ~HMN~.

~Filament~ - это одна из цепочек внутри ~Object~-а. А объектов в одном
~Jet~-е много.

8:40

~Edge~ - это еще не закрытые блоки

~Jet~ - набор лайфлайнов, лайфлан - набор ~Record~-ов.

~Record~ - это некоторый (подписанный создавшей его нодой) набор данных,
адресуемый через свой ~hash~ и номер ~Пульса~. Например ~Request~ и
~Result~ - это ~Record~-ы. Он также может содержать ссылку на другой
~Record~ объединяясь, таким образом, в цепочку. Пример такой цепочки
является ~Object~.

~Object~ - это экземпляр ~Смарт-контракта~. Он состоит из записей, каждая
из которых представляет его состояние в какой-то временной точке.

~Virtual Jet~ - это набор афинных ~Object~-ов, т.е. объектов, которые
хранятся вместе..

~Message~ - это сетевое представление ~Record~-а, состоящего из одного
или более ~Record~ов- Оно состоит из:
- ~Message Head~ - поднабор полей, который будет передан получателю сразу
  при отправке. Этот поднабор должен влезать в UDP-пакет вместе со
  своей подписью.
- ~Message Content~ - все что не влезло в ~Message Head~.
https://insolar.atlassian.net/wiki/spaces/DEV/pages/1080295571/Core+v2+-+Messages

Несколько ~Message~ могут быть посланы бандлом, т.е. в одной сетевой
посылке.

*** Сплиттинг

Изначально существует один ~Jet~ и все данные пишуться в него. Как только
размер данных на протяжении нескольких пульсов превышает определенный
порог - он разделяется на два, этот процесс называется ~split~. Таким
образом формируется дерево Jet-ов.

Теперь у нас 2 ~Jet~-а, и отсплитившийся ~Jet~ может быть передан другому
~LME~. Если на старый ~LME~ за данными из отсплитившегося ~Jet~-а придет
~VE~, то ему будет сообщено, что он должен переадресовать свой запрос
этому другому ~LME~ и так продолжится рекурсивно, пока данные не будут
найдены.

Обратный процесс - слияние разсплитившихся ~Jet~-ов

[TODO:gmm] Code owner = Романцев. В 2.0 этого когда не будет, потому что там все
переделывается, пока неясно как.

[TODO:gmm] - Высоконагруженные объекты среди слабонагруженных.


[TODO:gmm] Jets, Filaments, Etc - искать в конфле по Романцеву

[TODO:gmm] Консенсус

[TODO:gmm] Join ноды в сеть:
Изначально предполагалось, что ноды будут сами джойнить друг друга, но
этот механизм оказался сложным в реализации и тестировании, поэтому
решили пока сделать упрощенный алгоритм.
- бутстрап через хэвик - через него все зарегиструются
- дискавери нода подключает хэвик
- механизм бутстрапа будет меняться

[TODO:gmm] - PulseAppender

Каждый пульс сохраняется на LME как JetDrop, который представляет собой
изменившиеся состояния каждого объекта. Набор состояний конкретного
объекта образует ~filament~.

~Matherial Node~ выполняет хранение данных, так как они подписаны, они
неизменны и иммутабельны, однако [TODO:gmm] - что будет если хранилище не
запишет, посланные ему ~Record~-ы?

~Lifeline~ - это последовательность объектных ~Record~-ов.
Подробнее:
https://insolar.atlassian.net/wiki/spaces/DEV/pages/784891920/Data+Model#DataModel-Object

Чтобы отправлять ~Record~ он упаковывается в ~Message~.


[TODO:gmm] - Как разворачивается сеть (Network 101)

** Передача через пульс

Если во время выполнения Request-а меняется пульс, то с момента смены
пульса текущий VE не может продолжать исполнение, потому что в новом
пульсе он уже не является VE для этого объекта. И валидаторы не пропустят
и другие ноды когда проверяют может ли эта нода исполнять запрос увидят
что не может.

Поэтому бывший VE вычисляет новый VE по своему объекту и сообщает новому
VE что продолжает исполнение и ему нужен ~Delegation Token~. Новый ~VE~
проверяет, что в прошлом пульсе старый VE был VE по этому объекту и
выдает этот токен, подписывая его. После чего бывший VE продолжает
исполнение, прикладывая к каждому внешнему вызову этот токен. Получатель
вызова проверяет подпись токена ([TODO:gmm] - откуда он знает открытый
ключ?) и видит что бывший VE может это исполнять.

Если и новый пульс закончился, то бывший VE может опять сходить к еще
более новому VE, приложив свой предыдущий токен и получить свежий
~Delegation Token~. Такое можно повторять до истечения лимита пульсов на
запрос. Если лимит истек, то новый VE отказывает в выдаче токена и
начинает исполнять запрос самостоятельно с самого начала, но
переиспользует сохраненные результаты предудыщих вызовов за счет
"Механизма дедупликации". Это механизм, который регистрирует внешние
вызовы на лайте и если вызов с таким Reason и параметрами (и с тем же
счетчиком) уже был сделан и результат его записан, то не нужно его
повторять.

Когда мы пытаемся дедуплицировать запрос мы можем иметь три состояния
- такого запроса не было - его на до исполнять
- такой запрос был, но результата нет - запрос не регистрируется (так как
  уже зареган), но начинает исполнение
- такой запрос был и есть записанный результат

Этот механизм позволяет сильно ускорить валидацию. В рамках валидации
проверятся, что все вызовы были сделана и проверяются результаты вызовов

Как происходит (будет происходить) валидация:
- Request был зарегистрирован, исполнен, завершен и записан, его можно
  валидировать
- Валидаторы берут его, с темы же значениями и выполняют как бы "в том же
  пульсе" (но на самом деле они работают в следующем пульсе)
- Плюс к этому, валидаторы проверяют всю цепочку вызовов, и их Reason-ы


* Compontents of Platform
** Platform Core
*** Network
**** Node Roles

Виды ролей и связь их с узлами

***** Role Categories

В системе существует три категории ролей:
- ~Static (Primary) Role~ - у каждого узла существует ~одна и только одна
  статическая роль, назначается при регистрации узла~. ~Static role~
  используется системой для автоматического назначения ~dynamic role~, а
  так же определяет некоторые специальные права узлов.
- ~Dynamic Role~ - действует один пульс и определяет права (и
  обязанности) узла по отношению к конкретной сущности (объект, jet и
  т.п.). У одного узла ~одновременно может быть множество~ ~dynamic roles~,
  в том числе по одной сущности. Однако, некоторые комбинации
  динамических ролей запрещены. Существует две подкатегории ~dynamic
  roles~:
  - ~Allocated Dynamic Role~ - результат автоматического назначения на
    основе primary role.
  - ~Delegated Dynamic Role~ - результат полной или частичной передачи
    прав по роли от держателя ~allocated dynamic role~. Переделегирование
    не допускается.
  - ~Special Role~ - особые разрешения для узла, не связанные со ~static
    roles~, но их можно совмещать. Узел может иметь ноль и более ролей
    этого типа, ~назначаются при регистрации узла~.
  - (ещё ожидаются роли Cascade и Encrypt)

****** Static Roles

Static Role одна и только одна на узел.

Колонка “гранулярность” в таблице определяет относительно чего
назначаются dynamic roles для узла в соответсвующей статической роли.


| Static Role          | Application Function                                 | Granularity of Dynamic Allocation                                    |
|----------------------+------------------------------------------------------+----------------------------------------------------------------------|
| Neutral (NN)         | Не специфицирована, не выполняющие работы уровня L4+ | Не специфицирована, не выполняющие работы уровня L4+                 |
| Heavy Material (HMN) | Долгосрочное хранине                                 | Material jet segments (набор последовательных drop'ов в одном jet'е) |
| Light Material (LMN) | Запись и краткосрочное хранение drop'ов              | Jet drop'ы / Jet-affined                                             |
| Virtual (VN)         | Вычисления и краткосрочное хранение object'ов        | Object'ы / Object-affined                                            |

****** Dynamic Roles

~Важно~! помнить:

- Динамическая роль назначается конкретному узлу, на конкретный пульс и
  на конкретную сущность (request, object, jet, segment).
- Один узел на один пульс получает множество динамических ролей, в том
  числе и для одной сущности, например: LME(A, P) и LMS(A, P-1).

******* Dynamic Role Targets

Существуют следующие категории сущностей для динамической аллокации (Dynamic Role Targets):

- Virtual jet - обычно упоминается как object / lifeline. Особенность в
  том, что связанные (афинные объекты) не могут исполняться отдельно и
  обозначение VE(A, P) говорит, не только об исполнителе для A, но и для
  всех афинных ему объектов.
- Material jet - обычно упоминается как jet. Это группа храненения для
  virtual jets, сформированная на основе текущего jet tree. Для каждого
  объекта на конкретный пульс всегда однозначно определяется jet.
  - В результате работы LME, по каждому jet'у за пульс будет сформирован
    блок записей - jet drop.
- Material jet segment - последовательность связанных jet drop'ов
  относящихся к одному jet'у (или к его производным после split/merge),
  сохранённая одним HME и хранимая как неделимый набор данных.
  - Хранение в виде сегментов предназначено для упрощение учёта хранения
    и контроля за распространением данных.
  - Requests - запросы. Это обобщающая категория, когда узел не передаёт
    свою динамическую роль, но делегирует часть полномочий на исполнения
    конкретной операции произвольному узлу.

|                                                | Request           | Virtual Jet (object and its affined ones) | Material Jet                    | Material Jet Segment                                                        |
|------------------------------------------------+-------------------+-------------------------------------------+---------------------------------+-----------------------------------------------------------------------------|
| Automatically allocated to                     | NA                | VN                                        | LMN                             | HMN                                                                         |
| Allocation Function                            | NA                | Entropy + ActiveNodes                     | Entropy + ActiveNodes + JetTree | Entropy + ActiveNodes + LME/LMS approval                                    |
| Automatically allocated node ~can delegate to~ | Any ~known*~ node | Any ~active~ node                         | Any ~active~ node               | Any known* HMN                                                              |
| Restrictions                                   | None              | (1)                                       | (1)                             | Аналогично material jet, плюс ограничения по Scattering и Replication rules |
| Dynamic Roles                                  | NA                | (2)                                       | (2)                             | (2)                                                                         |


(1) VE(A, Pn) не может быть VV(A, Pn), т.е. исполнитель не может быть валидатором для своих результатов. См. ниже.
(2) Executor (*E), Replica (*R), Validator(*V), Stash(*S)
*known node - узел за пределами текущего консенсуса, но который можно аутенцифицировать и авторизовать (есть ключ и т.п.)

******* Allocation Restrictions

Возможно два уровня ограничений на совмещение одноим узлом ролей по одной
сущности:

- Обязательный - исполнитель (*E) не может быть автоматически выбран на
  роль валидатора (*V) для проверки собственных результатов. Это
  ограничение действует безусловно, функция выбора валидаторов не долна
  включать узел, вычисленный как *E.
  [NOTE] Это так же должно распространяться и на делегатов, но в
  ограниченной форме. Т.к. делегирование выполняется по запросам, то если
  делегат попал в валидаторы, то необходимо, чтобы для каждого
  делегированного запроса было достаточно валидаторов, не считая
  делегата, его выполнившего.
- Расширенный - если для пульсов P и P-1 исполнителем *E выбран один и
  тот же узел, то для P узел обязан сделать полное делегирование роли на
  следующий (с т.з. allocation function) узел. Данное поведение
  форсируется через *V (откажут в проверке).
  Для VE это так же форсируется через LME (примет только регистрацию
  полной делегации).


Такое поведение необходимо, чтобы функция вычисления исполнителя не
требовала рекурсии по истории аллокаций. Любой другой узел всегда
однозначно вычисляет *E, а в случае такой ситуации - получит от *E
переадресацию на делегата.

****** Special Roles

В настоящий момент используется только одна специальная роль:

- Discovery - узел, используется для подключения к сети узлов, с
  неактуальным списком активных узлов.

В дальнейшем появится роль Dynamic Discovery.

*** BorderContracts

#+NAME:
#+BEGIN_SRC plantuml :file ../img/uml-border-contract.png :eval no-export
  @startuml
  participant C as "RPC Client" order 10
  participant S as "RPC Server" order 20
  participant V as "Virtual Node" order 30
  == Pulse change ==
  S <- : CommitPulse(PN)
  S -> S : SeqN = FirstSeqN = Rand.UInt()\nmapSecrets[PN] = SecretN = Rand.UInt()
  ...
  C -> S : getSeed()
  activate S
  S -> S : seed = [PN, SeqN, hash(PK, SeqN, mapSecrets[PN])]\nmapSeeds[PN][SeqN]=1\nSeqN++
  S -> C : seed
  deactivate S
  note right of S
  To keep seeds:
  - PN, FirstSeqN, SecretN
  - bitmap[# of SeqN]
  => ~13kB per 100k seeds
  end note
  note right of S
  NB! Seed generation & load balancig can be done
  on a separate server. Then the seed should be
  extended by adding [mapSecrets[PN], FirstSeqN]
  encrypted by target's PK.
  end note
  ...
  C -> S : apiCall(payload[seed, endpoint, callSite])
  activate S
  S -> S : assert(mapSeed[seed.PN][seed.SeqN]==1)\nassert(seed.hash == hash(PK, seed.SeqN, mapSecrets[seed.PN])\nmapSeed[seed.PN][seed.SeqN]=0
  V \-> S : facade = getEndpointFacade(endpoint) // cacheable
  S -> S : facade.preValidatePayload(payload)
  V \-> S : slotId := conveyor.AddInput(incomingExternal, payload, validation)
  S -> C : queueId = [PN, slotID, hash(payload)]
  note right of C
  Can also include sign(PK(VN), hash(queueId)) to prevent MitM
  end note
  deactivate S
  activate V
  note right of V
  SM for the request
  end note
  V -> V : identity = validateIdentity(payload) // can call e.g. Kerberos
  V -> : extCallRef = registerExternalIncoming(payload) + \nregisterImpersonatedOutgoing(payload, identity)
  ...
  V ->x V : stop
  deactivate V
  S \-> C : (get a new seed)\nstatus = apiCallStatus(payload[new_seed, queueId])
  note right of S
  apiCallStatus will reject too old PNs, then it goes into 4 ways:
  1. (current PN) will look for an SM by slotID
  2. (past PN) will look for an SM, then in a special cache by slotID
  3. (antique PN) will create a special SM to find a registration record by [PN, hash(payload)]
  end note
  @enduml
#+END_SRC

#+results:
[[file:../img/uml-border-contract.png]]


[[file:../img/uml-border-contract.png]]

** Ledger
** Virtual Machines
** Smart Contracts
** Platform API
** Observer
** Business Foundation
** Application
* Deployment

- [TODO:gmm] - Как развернуть сеть с нуля
- [TODO:gmm] - Как протестировать что-то на развернутой сети
- [TODO:gmm] - Как обновлять
https://insolar.atlassian.net/wiki/spaces/DEV/pages/1038221313/WIP+Insolar+Kubernetes+Deploy+Design

* Testing
* Добавление/удаление нод
* Questioons

- Что такое AppController
  AppController - это функциональность внутри утилиты insolard, которая
  занимается запуском компонентов в нужной конфигурации и выбором схемы
  взаимодействия между этими компонентами.
  https://insolar.atlassian.net/wiki/spaces/DEV/pages/1059979386/Core+v2+-+AppController+design
  AppController нужен для простого и быстрого создания различных
  конфигураций ролей и сети для локального запуска. Цель получить один
  процесс, к которому можно подключиться дебаггером.

- Что такое Scheduler-сервис
  - Узнал отсюда:
    https://insolar.atlassian.net/wiki/spaces/SAIV/pages/1070071873/WIP+Scheduler
- SAIV
- SAGA
  https://microservices.io/patterns/data/saga.html
  [TODO:gmm] - актуальна ли saga для assured ledger?

* Other

Example of GoLang-code

#+NAME:
#+BEGIN_SRC go
    package main

    import (
        "fmt"
        "github.com/pkg/errors"
        "go/ast"
        "go/parser"
        "go/token"
        "io/ioutil"
        "os"
        "reflect"
        "strings"
    )

    const (
        TemplateDirectory = "templates"

        //filename = "src/github.com/insolar/assured-ledger/ledger-core/v2/conveyor/smachine/ping-pong/example/example_3.go"
        filename = "src/github.com/insolar/assured-ledger/ledger-core/v2/logicrunner/sm_object/object.go"
        mainPkg   = "main"
        errorType = "error"
        MachineTypeGoPlugin
    )

    type RecvPair struct {
        Name 	string
        Type 	string
    }
#+END_SRC
