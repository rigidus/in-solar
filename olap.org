#+STARTUP: showall indent hidestars
#+SETUPFILE: https://raw.githubusercontent.com/fniessen/org-html-themes/master/setup/theme-readtheorg.setup

* Постановка задачи

Поиск и подготовка сравнения по моделям и метамоделям данных для OLAP
систем.

За неделю собрать черновой обзорчик - возможных вариантов, что/где надо
будет посмотреть. Понятно, что сами модели за неделю разобрать не
получится, вряд-ли даже детали успеешь все нарыть. Да хотя бы просто
названия систем или моделей с урлами. ещё Володю пингуй, это ему надо.

* Терминология

..просто чтобы мы понимали что говорим об одном и том же

~OLAP-модель~ – это совокупность наборов данных, организованных в виде:
- исходных данных (витрины данных)
- многомерного информационного куба,
- набора аналитических операций с элементами куба и
- формы представления результатов.

OLAP-модели связаны между собой: результаты выполнения одной модели может
быть входными данными для расчета другой модели.

Зачем нам все это? - Для анализа данных по разным срезам.

Кому это надо? - Аналитикам и и топ-менеджерам. Можно добавить СППР -
Систему Поддержки Принятия Решений. Позволяет проверять гипотезы /
принимать решения.

~Data Warehouse~ (хранилище данных) - физический уровень
OLAP. Получается, если взять данные и прогнать их через ETL.

~ETL~ - Extraction, Transformation, Loading

~ГипекКуб~ - способ думать о данных как о многомерном кубе, где оси
содержат атрибуты, а ячейки – агрегируемые количественные данные. Вдоль
каждой оси атрибуты могут быть организованы в виде иерархий,
представляющих различные уровни их детализации.

~Data Mart~ (витрины данных) — множество тематических баз данных,
содержащих информацию, относящуюся к отдельным аспектам деятельности
организации.

* Ограничения

тест FASMI (Fast Analysis of Shared Multidimensional Information)

- получение анализа менее чем за 5 секунд
- возможность осуществления любого логического и статистического анализа
- многопользовательский доступ
- многомерное представление данных, включая поддержку для иерархий и
  множественных иерархий (это — ключевое требование)
- возможность обращаться к любой нужной информации независимо от ее
  объема и места хранения.

* Пример

Входные данные - информация о клиентах, их географическом положении,
затратах на производство и продажу продукта, компании-доставщика

Агрегированное представление - запрос о выручке, аггрегированный по
географии. Получаем вектор.

В распределении по компаниям-доставщикам получаем матрицу (pivot table)

В распределении по годам - получаем куб. Оси (они же "dimentions") -
атрибуты. Точки на оси называются "members". Они могут быть иерархичными,
например страны включают города, районы; годы включают месяцы и.т.п.

Принимаемое решение - стоят ли продажи в конкретной стране затрат на
доставку и маркетинг. СППР может решить это сама, анализируя временной
тренд по правилам, задаваемым экспертом.

* Что можно делать

В OLAP из многомерных кубов можно делать срезы – т.е. когда данные
фильтруются по одной или нескольким осям, или проекции – когда по одному
или нескольким осям куб "схлопывается", агрегируя данные. Это делается с
помощью языков запросов (похожих на SQL, но с особенностями).

Основная вычислительная проблема для БД – быстрая агрегация. Для этого
данные сильно денормализируются, плюс дополнительно содержат
вспомогательные таблицы, хранящие частично агрегированные данные.

Drill – это консолидация/детализация отчета с помощью
увличения/уменьшения степени агрегации данных, совмещенное с фильтрацией
по какой-нибудь другой оси (или нескольким осям).

* Модели данных и стандарты

Часть стандартов описывают хранение и передачу, часть интерфейсы для
языков запросов.

** ROLAP/MOLAP/HOLAP

Хранение активных данных в реляционной/многомерной/гибридной БД. В нашем
случае скорее в реляционной - тогда данные OLAP хранятся в
денормализованном виде, а часть заранее рассчитанных агрегатов и значений
хранится в специальных таблицах. Смотреть "схема звезда" и "схема
снежинка".

** Common Warehouse Metamodel (CWM)

стандарт OMG для обмена метаданными, который добавляет метамодели для
реляционных, многомерных данных и данных таблиц, а также для
преобразования, функций OLAP, data mining и Хранилища данных, включая
процессы и операции.

Системы, которые "понимают" метамодель CWM, обмениваются данными в
форматах, которые согласуются с этой моделью.

CWM выражен на языке UML и по сути CWM - это DSL для определения
хранилищ данных.

~Meta Object Facility~ (MOF) - определяет общие интерфейсы и семантику для
взаимодействующих метамоделей. MOF - это пример мета-метамодели, или
модели метамодели. Он также определяет набор IDL-преобразований
(Interface Definition Language, язык описания интерфейса), который
устанавливает спецификацию интерфейса для обнаружения и управления
моделей с помощью программных API).

Поскольку CWM наследуется из UML, MOF также является моделью и для
CWM. Все модели CWM выражаются на UML и реализуют семантику MOF.

~XML Metadata Interchange (XMI)~ - Стандарт OMG, который устанавливает
правила преобразования метамоделей MOF в XML. XMI определяет, как
использовать XML-теги для представления сериализованных моделей,
совместимых с MOF. Метамодели MOF транслируются в XML DTD (document type
definition), а модели - в XML-документы, которые согласуются со своими
DTD.

CWM фактически состоит из ряда составных метамоделей (или
суб-метамоделей), которые организованы в виде следующих 4 слоев:
- базовый слой (Foundation)
  - DataTypes
  - TypeMapping
  - KeysIndexes
  - Expressions
  - BusinessInformation
  - SoftwareDeployment
- источники данных (Resources) -  предоставляет возможность моделировать
  существующие и новые источники данных
  - Relational
  - Record
  - Multidimensional
  - XML
- анализ (Analysis) - метамодель для преобразования данных, OLAP,
  визуализации информации/репортинга (business nomenclature) и data
  mining.
  - Transformation
  - OLAP
  - BusinessNomenclature
  - DataMining
  - Visualization
- управление Хранилищем (Management) - процессы и операции , журнализации
  (activity tracking) и планирования работ (scheduling)
  - WarehouseProcess
  - WarehouseOperations

** Open Information Model (OIM)

Аналогичная петрушка от Microsoft - насколько я понимаю, они влились в CWM

** CRISP-DM (Cross Industry Standart Process for Data Mining)

Стандарт методологии DataMining. Думаю нас пока не очень интересует.

Модель состоит из набора задач:
- фазы
- общие задачи (без учета предметной области)
- специализированные задачи (типа очистки данных)
- процессы

** PMML 2.0 (Predicted Model Markup Language)

Для меж-системного обмена моделями.

Структура моделей описывается с помощью DTD-файла (PMML-DTD).

Поддерживает следующие типы моделей:
- Association - [TODO:gmm] не понятно пока зачем нужна
- Tree Model - деревья решений для классификаций
- Clustering
- Regression
- Neural Network
- Naive Bayes - матрицы для байесовского вывода
- Sequence - упорядоченный набор реляционныйх объектов адресумый по
  Primary Key

** SQL/MM

изначально - спецификация языка, расширяющего SQL для полнотекстового
поиска. Позже добавилась часть посвященная DataMining с четырьмя моделями
- Rule
- Cluster
- Regression
- Classifiaction

** OLE DB

MSFT-стандарт для DataMining в RDBMS

** JDMAPI (Java Data Mining API)

стандарт на джавовское API, совместимый с CWM, SQL/MM и PMML.

** Model Driven Architecture

Model Driven Architecture (MDA, архитектура управляемая моделью) – это
архитектурный подход к построению многокомпонентного ПО, основанный на
разработке независимого от платформы и языка программирования
представления системы (модели) с последующим переходим к исходному коду
системы через автоматизированную генерацию кода.

Довольно интересно и применимо к нашим задачам, как по мне.

в MDA вводятся понятия:
- модели, зависимой от платформы (Platform Specific Model (PSM))
- модели, независимой от платформы (Platform Independent Model (PIM)).

MDA предполагает создание PIM и последующий переход к PSM с
использованием специализированных средств. Кроме того возможен переход от
одной PSM модели к другой.

OMG как разработчик MDA не предоставляет никаких программных средств для
обеспечения перехода от модели к модели. Предполагается, что они будут
реализоваными силами сторонних разработчиков. Фактически, MDA – это
концепция разработки, поддержанная группой стандартов (UML, MOF, CWM и
XMI), разработанных OMG. Эти стандарты накладывают требования, которым
должны удовлетворять модели, и предоставляют рекомендации для
разработчиков сред создания ПО по MDA

Ядром MDA являются несколько стандартов:
- UML

- MOF (Meta Object Facility) — общий абстрактный язык для описания
  метамоделей; на его основе построены формальные описания метамодели для
  CWM и UML. Состоит из:
  - М0 - данные - правила описания данных,
  - М1 - модель - правила организации данных
  - М2 - метамодель - правила организации моделей (данных и взаимосвязей,
    описываемых в матаданных), т.е. это метаданные
  - М3 - мета-метамодель - правили организации метамодели , т.е
    метаданных. Метаданные - это такие же данные и нужна метамодель для
    описания их организации, для этого и предназначена мета-метамодель.
  Следует заметить, что метаданные в RDBMS - хранимые.

  Сохраняются модели уровней М0-М2 (MOF), а модель уровня М3 является
  логической и реализуется в программной оболочке.

  В MDM объекты, атрибуты, измерения, связи описываются метаданными в
  хранимой метамодели и сохраняются в той или иной форме, обычно в
  реляционных таблицах, хотя могут и в файлах, в виде структурированных
  данных.

  В ООП метамодели (UML) не хранимые, а логические и сохраняются лишь в
  виде документов (XMI).

  Хранимые метаданные позволяют генерировать SQL запросы в системах BI.

- CWM (Common Warehouse Model) - представляет наиболее часто используемые
  в базах данных и инструментах бизнес-анализа метаданные
- XMI (XML Metadata Interchange), играет служебную роль, описывая
  отображение моделей MOF и UML на стандарт XML. При этом метамодели
  преобразуются в DTD-структуру документа, а модели — в тело
  XML-документа. Это позволяет объединить модель и ее метамодель в одном
  документе и получить так называемый «самоописываемый» (self-
  describing) документ, содержащий не только данные, но и информацию,
  необходимую для их интерпретации.

В основе MDA лежит понятие платформно-независимой модели
(platform independent model, PIM). Речь идет о детальной исполняемой
модели на языке действий UML (action semantics) с пред- и постусловиями,
сформулированными на OCL (Object Constraint Language)

** MD-model

Количество  возможных  измерений  данных для анализа задается
многомерной моделью концептуального уровня, которая может быть  получена
на основе построенной ранее ER-модели.

Данный подход отличается тем, что в ER-модели дополнительно вычленяются в
отдельные сущности атрибуты, существенные в плане анализа, после чего
связи типа "один-ко-многим" рассматриваются как потенциальные гиперкубы
(атрибуты связей – как меры гиперкуба, а связываемые сущности – как
измерения гиперкуба).

Идея преобразования ER-модели в многомерную модель (MD-модель)
заключается в том, что каждая связь типа «один-ко-многим» следует
рассматривать как потенциальную факт-сущность MD-модели, при этом связь
один-ко-многим задают иерархии в измерениях кубов. Это обстоятельство
служит отправной точкой проектирования MD-модели.

** Формальный концептуальный анализ

Formal Concept Analysis впервые был предложен Р. Вилле (R. Wille)

Формальный концепт – это множество объектов предметной области, каждый из
которых обладает всеми атрибутами из некоторого подмножества атрибутов,
присущих всем этим объектам.

Формальный контекст может быть представлен в виде бинарной матрицы,
строки которой помечены именами объектов, а столбцы – значениями
атрибутов.

Процесс OLAP-анализа представляется совокупностью операций с
многомерными данными – детализации, консолидации (группировки),
формирования среза и поворота. Операции консолидации определяют переход
от детального представления данных к агрегированному, а в случае
детализации осуществляется обратный переход.

Формирование среза куба заключается в фиксации значения (значений)
определенного измерения, при этом сокращается размерность куба. Срез
представляет собой подкуб, в который входят все остальные измерения. Опе-
рация поворота заключается в изменении положения осей куба – измерений. В
результате вращения меняется «точка зрения» на данные.

Предлагаемый метод включает следующие основные этапы:
1. Формирование множества объектов анализа предметной области.
2. Построение формального контекста.
3. Определение формальных кубов-концептов.
4. Построение формальной концептуальной решетки OLAP-кубов

* Этапы работы

На первом этапе выполняется декомпозиция задачи и определяется
множество OLAP-моделей, позволяющих автоматизировать процесс решения
каждой подзадачи. Для этих целей используются алгоритмы декомпозиции
задач.

На втором этапе строится метаописание комплекса моделей. Метаописание
позволяет автоматизировать построение комплекса взаимосвязанных
OLAP-моделей, автоматизировать процессы построения цепочек моделей для
выполнения расчетов, обеспечить управление расчетом и многовариантные
расчеты

Сначала с использованием автоматически генерируемого системного описания
строится метаописание каждой модели. Метаописание OLAP-модели содержит
наименование модели, назначение модели, наименование витрины данных,
поставляющей исходные данные для OLAP-модели, и перечень показателей –
результатов расчета модели. Затем полуавтоматически, декларируется
перечень отношений между моделями.

Рассматриваются два типа отношений: зависимость моделей и взаимная
независимость моделей. Затем в форме правил описываются эвристические
критерии, условия применения или изменения моделей, условия выбора
моделей, а также может быть описан в явном виде порядок расчета
нескольких OLAP-моделей – так называемая цепочка моделей.

Третий этап методики формирования представляет собой процесс генерации
цепочек OLAP-моделей. Генерация цепочек OLAP-моделей выполняется на
основе их метаописания как процедура логического вывода на гибридной базе
знаний. Процедура вывода представляет собой интерактивный процесс,
позволяющий выполнять многовариантный расчет.

Для решения сложных аналитических задач строится не одна модель, а целый
комплекс OLAP-моделей, каждая из которых решает отдельную подзадачу.
